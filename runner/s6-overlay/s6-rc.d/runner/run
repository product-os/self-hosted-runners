#!/usr/bin/env bash

set -ae

# unset secrets
unset ACTIONS_RUNNER_AUTH_TOKEN ACTIONS_RUNNER_APP_KEY_B64 GH_TOKEN GITHUB_TOKEN

[[ ${VERBOSE,,} =~ true|yes|on|1 ]] && set -x

ACTIONS_RUNNER_NAME=${ACTIONS_RUNNER_NAME:-$(uuidgen)}
# Configure the runner to only take one job and then let the service un-configure the runner after the job finishes (default false)
ACTIONS_RUNNER_EPHEMERAL=${ACTIONS_RUNNER_EPHEMERAL:-true}
# Replace any existing runner with the same name (default false)
ACTIONS_RUNNER_REPLACE=${ACTIONS_RUNNER_REPLACE:-false}
ACTIONS_RUNNER_GROUP=${ACTIONS_RUNNER_GROUP:-Default}
ACTIONS_RUNNER_WORK_DIRECTORY=${ACTIONS_RUNNER_WORK_DIRECTORY:-/home/runner/_work}

# these tmpfs mounts need the executable bit set
mount -o remount,rw,exec tmpfs /tmp
mount -o remount,rw,exec tmpfs /run

function move_to_tmpfs() {
    # unmount any existing binds
    umount "${1}" 2>/dev/null || true
    # create mountpoint for a new tmpfs
    mkdir -p "${1}.tmpfs"
    # create the tmpfs with execute permissions
    mount -t tmpfs -o rw,exec tmpfs "${1}.tmpfs"
    # copy the contents of the original directory to the tmpfs
    cp -a "${1}"/* "${1}.tmpfs"
    # bind mount the tmpfs over the original
    mount --bind "${1}.tmpfs" "${1}"
}

# create tmpfs overlays for some directories that need to be writable
# but should not persist container restarts
for dir in /home/runner /opt; do
    move_to_tmpfs "${dir}" || true
done

# set hostname
echo "${ACTIONS_RUNNER_MACHINE_NAME:-$(hostname)}" > /etc/hostname
# sed "s/127.0.1.1.*/127.0.1.1 ${new_hostname}/" -i /etc/hosts
hostname -F /etc/hostname
hostname

curl_with_opts() {
    curl --fail --silent --retry 3 --connect-timeout 3 "$@"
}

get_geo() {
    if curl_with_opts -I https://ipinfo.io; then
        geoip_api_url=https://ipinfo.io
        if [[ -n $GEOIP_API_TOKEN ]]; then
            geoip_api_url="${geoip_api_url}?token=${GEOIP_API_TOKEN}"
        fi
        ipinfo="$(curl_with_opts "${geoip_api_url}")"
    else
        ipinfo='{"city":"Unknown","region":"Unknown","country":"Unknown"}'
    fi
}

get_geo

runner_tags=()
runner_tags+=("family:$(cat </etc/lsb-release | grep DISTRIB_ID | awk -F'=' '{print $2}')")
runner_tags+=("distro:$(cat </etc/lsb-release | grep DISTRIB_CODENAME | awk -F'=' '{print $2}' | sed 's/"//g')")
runner_tags+=("major:$(cat </etc/lsb-release | grep DISTRIB_RELEASE | awk -F'=' '{print $2}' | sed 's/"//g')")
runner_tags+=("minor:$(cat </etc/lsb-release | grep DISTRIB_DESCRIPTION | awk -F'=' '{print $2}' | sed 's/"//g')")
runner_tags+=("machine:$(uname -m)")
runner_tags+=("arch:$(dpkg --print-architecture)")
runner_tags+=("board:$(cat </sys/devices/virtual/dmi/id/board_name || echo 'unknown')")
runner_tags+=("cpu:$(nproc)")
runner_tags+=("mem:$(($(cat </proc/meminfo | grep MemTotal | awk '{print $2}') / 1024 / 1024))Gi")
runner_tags+=("country:$(echo "${ipinfo}" | jq -r .country | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
runner_tags+=("region:$(echo "${ipinfo}" | jq -r .region | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
runner_tags+=("city:$(echo "${ipinfo}" | jq -r .city | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
runner_tags+=("platform:${ACTIONS_RUNNER_PLATFORM}")
runner_tags+=("balena_device_uuid:${BALENA_DEVICE_UUID:-unknown}")

if [[ -n $ACTIONS_RUNNER_EXTRA_TAGS ]]; then
    runner_tags+=("${ACTIONS_RUNNER_EXTRA_TAGS}")
fi

# Join the array elements with commas
runner_tags_str=$(printf "%s," "${runner_tags[@]}")
# Remove the trailing comma
runner_tags_str=${runner_tags_str%,}

url="https://github.com/${GITHUB_ORG:-balena-io}"
if [ -n "${GITHUB_ENTERPRISE:-}" ]; then
    url="https://github.com/enterprises/${GITHUB_ENTERPRISE}"
fi

config_args=()
config_args+=("--disableupdate")
config_args+=("--unattended")
config_args+=("--name" "${ACTIONS_RUNNER_NAME}")
config_args+=("--token" "$(</run/runner.token)")
config_args+=("--url" "${url}")
config_args+=("--runnergroup" "${ACTIONS_RUNNER_GROUP}")
config_args+=("--work" "${ACTIONS_RUNNER_WORK_DIRECTORY}")
config_args+=("--labels" "\"${runner_tags_str}\"")

[[ ${ACTIONS_RUNNER_EPHEMERAL,,} =~ true|yes|on|1 ]] && config_args+=("--ephemeral")
[[ ${ACTIONS_RUNNER_REPLACE,,} =~ true|yes|on|1 ]] && config_args+=("--replace")

# create and chown the work directory
mkdir -p "${ACTIONS_RUNNER_WORK_DIRECTORY}"
chown -R "runner:runner" "${ACTIONS_RUNNER_WORK_DIRECTORY}"

# chown the current directory since files will be written by the runner process
chown -R "runner:runner" /home/runner/

# remove any existing runner registration files
rm -f /home/runner/.runner

# configure as runner user
su - runner -c "/home/runner/config.sh ${config_args[*]}" 2>&1

# run as runner user
exec su - runner -c "/home/runner/run.sh" 2>&1
