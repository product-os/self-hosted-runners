#!/usr/bin/env bash

set -ae

# unset secrets
unset ACTIONS_RUNNER_AUTH_TOKEN ACTIONS_RUNNER_APP_KEY_B64 GH_TOKEN GITHUB_TOKEN

[[ ${VERBOSE,,} =~ true|yes|on|1 ]] && set -x

ACTIONS_RUNNER_NAME=${ACTIONS_RUNNER_NAME:-$(uuidgen)}
# Configure the runner to only take one job and then let the service un-configure the runner after the job finishes (default false)
ACTIONS_RUNNER_EPHEMERAL=${ACTIONS_RUNNER_EPHEMERAL:-true}
# Replace any existing runner with the same name (default false)
ACTIONS_RUNNER_REPLACE=${ACTIONS_RUNNER_REPLACE:-false}
ACTIONS_RUNNER_WORK_DIRECTORY=${ACTIONS_RUNNER_WORK_DIRECTORY:-/home/runner/_work}
ACTIONS_RUNNER_NO_DEFAULT_LABELS=${ACTIONS_RUNNER_NO_DEFAULT_LABELS:-false}
ACTIONS_RUNNER_DISABLE_UPDATE=${ACTIONS_RUNNER_DISABLE_UPDATE:-true}

# set hostname
new_hostname="${ACTIONS_RUNNER_MACHINE_NAME:-$(hostname)}"
echo "${new_hostname}" >/etc/hostname
awk -v newhost="${new_hostname}" '/localhost/ {print $0 " " newhost; next} 1' /etc/hosts >/tmp/hosts
sed "s/$(hostname)/${new_hostname}/g" -i /tmp/hosts
mv /tmp/hosts /etc/hosts
hostname -F /etc/hostname
hostname

curl_with_opts() {
    curl --fail --silent --retry 3 --connect-timeout 3 "$@"
}

get_geo() {
    if curl_with_opts -I https://ipinfo.io; then
        geoip_api_url=https://ipinfo.io
        if [[ -n $GEOIP_API_TOKEN ]]; then
            geoip_api_url="${geoip_api_url}?token=${GEOIP_API_TOKEN}"
        fi
        ipinfo="$(curl_with_opts "${geoip_api_url}")"
    else
        ipinfo='{"city":"Unknown","region":"Unknown","country":"Unknown"}'
    fi
}

get_geo

runner_tags=()
runner_tags+=("family:$(cat </etc/lsb-release | grep DISTRIB_ID | awk -F'=' '{print $2}')")
runner_tags+=("distro:$(cat </etc/lsb-release | grep DISTRIB_CODENAME | awk -F'=' '{print $2}' | sed 's/"//g')")
runner_tags+=("major:$(cat </etc/lsb-release | grep DISTRIB_RELEASE | awk -F'=' '{print $2}' | sed 's/"//g')")
runner_tags+=("minor:$(cat </etc/lsb-release | grep DISTRIB_DESCRIPTION | awk -F'=' '{print $2}' | sed 's/"//g')")
runner_tags+=("machine:$(uname -m)")
runner_tags+=("arch:$(dpkg --print-architecture)")
runner_tags+=("board:$(cat </sys/devices/virtual/dmi/id/board_name 2>/dev/null || echo 'unknown')")
runner_tags+=("cpu:$(nproc)")
runner_tags+=("mem:$(($(cat </proc/meminfo | grep MemTotal | awk '{print $2}') / 1024 / 1024))Gi")
runner_tags+=("country:$(echo "${ipinfo}" | jq -r .country | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
runner_tags+=("region:$(echo "${ipinfo}" | jq -r .region | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
runner_tags+=("city:$(echo "${ipinfo}" | jq -r .city | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
runner_tags+=("balena_device_uuid:${BALENA_DEVICE_UUID:-unknown}")

# comma-separated list of tags to add to the runner
if [ -n "${ACTIONS_RUNNER_BUILD_TAGS:-}" ]; then
    # split the string into an array
    IFS=',' read -r -a build_tags <<<"${ACTIONS_RUNNER_BUILD_TAGS}"
fi

# comma-separated list of tags to add to the runner
if [ -n "${ACTIONS_RUNNER_EXTRA_TAGS:-}" ]; then
    # split the string into an array
    IFS=',' read -r -a extra_tags <<<"${ACTIONS_RUNNER_EXTRA_TAGS}"
fi

# comma-separated list of tags to remove from the runner
if [ -n "${ACTIONS_RUNNER_REMOVE_TAGS:-}" ]; then
    # split the string into an array
    IFS=',' read -r -a remove_tags <<<"${ACTIONS_RUNNER_REMOVE_TAGS}"
fi

# add the build tags to the runner tags
runner_tags+=("${build_tags[@]}")
# add the extra tags to the runner tags
runner_tags+=("${extra_tags[@]}")
# remove the remove tags from the runner tags
runner_tags=("${runner_tags[@]/${remove_tags[@]}/}")

# Join the array elements with commas
runner_tags_str=$(printf "%s," "${runner_tags[@]}")
# Remove the trailing comma
runner_tags_str=${runner_tags_str%,}

if [[ -z "${ACTIONS_RUNNER_REGISTRATION_SLUG}" ]]; then
    if [[ -n "${GITHUB_ENTERPRISE:-}" ]]; then
        ACTIONS_RUNNER_REGISTRATION_SLUG="enterprises/${GITHUB_ENTERPRISE}"
    fi
fi

if [[ -z "${ACTIONS_RUNNER_REGISTRATION_SLUG}" ]]; then
    if [[ -n "${GITHUB_ORG:-}" ]]; then
        ACTIONS_RUNNER_REGISTRATION_SLUG="orgs/${GITHUB_ORG}"
    fi
fi

if [[ ! "${ACTIONS_RUNNER_REGISTRATION_SLUG}" =~ ^(repos|orgs|enterprises)\/.*$ ]]; then
    echo "ACTIONS_RUNNER_REGISTRATION_SLUG must be in the format repos/OWNER/REPO or orgs/ORG or enterprises/ENTERPRISE"
    exit 1
fi

# remove orgs/ and repos/ from the slug
registration_slug=${ACTIONS_RUNNER_REGISTRATION_SLUG}
registration_slug="${registration_slug/orgs\//}"
registration_slug="${registration_slug/repos\//}"
registration_url="https://github.com/${registration_slug}"

# https://github.com/actions/runner/blob/main/src/Runner.Listener/Runner.cs
config_args=()
config_args+=("--disableupdate")
config_args+=("--unattended")
config_args+=("--name" "${ACTIONS_RUNNER_NAME}")
config_args+=("--token" "$(</run/runner.token)")
config_args+=("--url" "${registration_url}")
if [[ -n "${ACTIONS_RUNNER_GROUP}" ]]; then
    config_args+=("--runnergroup" "${ACTIONS_RUNNER_GROUP}")
fi
config_args+=("--work" "${ACTIONS_RUNNER_WORK_DIRECTORY}")
config_args+=("--labels" "\"${runner_tags_str}\"")

[[ ${ACTIONS_RUNNER_EPHEMERAL,,} =~ true|yes|on|1 ]] && config_args+=("--ephemeral")
[[ ${ACTIONS_RUNNER_REPLACE,,} =~ true|yes|on|1 ]] && config_args+=("--replace")
[[ ${ACTIONS_RUNNER_NO_DEFAULT_LABELS,,} =~ true|yes|on|1 ]] && config_args+=("--no-default-labels")
[[ ${ACTIONS_RUNNER_DISABLE_UPDATE,,} =~ true|yes|on|1 ]] && config_args+=("--disableupdate")

# create and chown the work directory
mkdir -p "${ACTIONS_RUNNER_WORK_DIRECTORY}"
chown -R "runner:runner" "${ACTIONS_RUNNER_WORK_DIRECTORY}"

# chown the current directory since files will be written by the runner process
chown -R "runner:runner" /home/runner/

# remove any existing runner registration files
rm -f /home/runner/.runner

# configure as runner user
su - runner -c "/home/runner/config.sh ${config_args[*]}" 2>&1

# run as runner user
exec su - runner -c "/home/runner/run.sh" 2>&1
