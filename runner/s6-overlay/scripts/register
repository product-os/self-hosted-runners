#!/usr/bin/env bash

# Get a GitHub authentication token for the runner either via GitHub App or PAT

if [[ -f /home/runner/.runner ]]; then
    echo "Runner is already registered, skipping..."
    exit 0
fi

set -euo pipefail

# required to use `read` with pipes
shopt -s lastpipe

# force debug tracing to off as we are dealing with secrets
set +x

# shellcheck disable=SC1091
. /etc/s6-overlay/scripts/functions

# decode app key and write to a file if one was provided via env vars
if [[ -n "${ACTIONS_RUNNER_APP_KEY_B64:-}" ]]; then
    echo "${ACTIONS_RUNNER_APP_KEY_B64}" | base64 -d >"/tmp/private.pem" || true
fi

if [[ -f "/tmp/private.pem" ]] && [[ -n "${ACTIONS_RUNNER_APP_ID:-}" ]] && [[ -n "${ACTIONS_RUNNER_INSTALLATION_ID:-}" ]]; then

    if [[ "${ACTIONS_RUNNER_REGISTRATION_SLUG:-}" =~ ^enterprises\/.*$ ]]; then
        # this endpoint does not work with GitHub Enterprise as no such permission exists for GitHub Apps
        echo "GitHub Apps are not a supported authentication method for GitHub Enterprise runners"
    else
        # https://www.npmjs.com/package/github-app-installation-token
        # https://github.com/gagoar/github-app-installation-token
        echo "Requesting installation token from GitHub App..."
        github-app-installation-token \
            --appId "${ACTIONS_RUNNER_APP_ID}" \
            --installationId "${ACTIONS_RUNNER_INSTALLATION_ID}" \
            --privateKeyLocation /tmp/private.pem 2>/dev/null | tail -n1 | read -r ACTIONS_RUNNER_AUTH_TOKEN || {
            echo "GitHub App installation token request failed!"
        }
    fi
fi

# cleanup secret files
rm -f /tmp/private.pem

if [[ -z "${ACTIONS_RUNNER_AUTH_TOKEN:-}" ]] && [[ -n "${GITHUB_TOKEN:-${GH_TOKEN:-}}" ]]; then
    echo "Using PAT 'GITHUB_TOKEN/GH_TOKEN' for authentication..."
    ACTIONS_RUNNER_AUTH_TOKEN="${GITHUB_TOKEN:-${GH_TOKEN:-}}"
fi

if [[ -z "${ACTIONS_RUNNER_AUTH_TOKEN:-}" ]]; then
    echo "No authentication methods provided!"
    exit 1
fi

if [[ ! "${ACTIONS_RUNNER_REGISTRATION_SLUG:-}" =~ ^(repos|orgs|enterprises)\/.*$ ]]; then
    echo "ACTIONS_RUNNER_REGISTRATION_SLUG must be in the format repos/OWNER/REPO or orgs/ORG or enterprises/ENTERPRISE"
    exit 1
fi

# https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-a-registration-token-for-a-repository
# https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-a-registration-token-for-an-organization
registration_url="https://api.github.com/${ACTIONS_RUNNER_REGISTRATION_SLUG}/actions/runners/registration-token"
echo "Requesting registration token..."
curl_with_opts -sX POST "${registration_url}" -H "Authorization: token ${ACTIONS_RUNNER_AUTH_TOKEN}" | jq -r .token > /run/runner.token

# shellcheck disable=SC2310
truthy "${VERBOSE:-}" && set -x

# set hostname
new_hostname="${ACTIONS_RUNNER_MACHINE_NAME:-$(hostname)}"
echo "${new_hostname}" >/etc/hostname
awk -v newhost="${new_hostname}" '/localhost/ {print $0 " " newhost; next} 1' /etc/hosts >/tmp/hosts
sed "s/$(hostname)/${new_hostname}/g" -i /tmp/hosts
mv /tmp/hosts /etc/hosts
hostname -F /etc/hostname
hostname

runner_tags=()

runner_tags+=("machine:$(uname -m)")
runner_tags+=("arch:$(dpkg --print-architecture)")

if lsb_release; then
    runner_tags+=("family:$(lsb_release --id --short)")
    runner_tags+=("id:$(lsb_release --id --short)")
    runner_tags+=("distro:$(lsb_release --codename --short)")
    runner_tags+=("codename:$(lsb_release --codename --short)")
    runner_tags+=("release:$(lsb_release --release --short)")
fi

ipinfo="$(get_geo)" || true
if [[ -n "${ipinfo}" ]]; then
    runner_tags+=("country:$(echo "${ipinfo}" | jq -r .country | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
    runner_tags+=("region:$(echo "${ipinfo}" | jq -r .region | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
    runner_tags+=("city:$(echo "${ipinfo}" | jq -r .city | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
fi

numgib="$(free -g | awk '/^Mem:/ {print $2}')"
numgib="$(round_up_to_power_of_two "${numgib}")"
if [[ -n "${numgib}" ]]; then
    runner_tags+=("${numgib}gib")
    runner_tags+=("mem:${numgib}Gi")
fi

numcpu="$(nproc)"
if [[ -n "${numcpu}" ]]; then
    runner_tags+=("${numcpu}cpu")
    runner_tags+=("cpu:${numcpu}")
fi

if kvm-ok; then
    runner_tags+=("kvm")
fi

if [[ -f /sys/devices/virtual/dmi/id/board_name ]]; then
    runner_tags+=("board:$(</sys/devices/virtual/dmi/id/board_name)")
fi

# comma-separated list of tags to add to the runner
if [[ -n "${ACTIONS_RUNNER_BUILD_TAGS:-}" ]]; then
    # split the string into an array
    IFS=',' read -r -a build_tags <<<"${ACTIONS_RUNNER_BUILD_TAGS}"
fi

# comma-separated list of tags to add to the runner
if [[ -n "${ACTIONS_RUNNER_EXTRA_TAGS:-}" ]]; then
    # split the string into an array
    IFS=',' read -r -a extra_tags <<<"${ACTIONS_RUNNER_EXTRA_TAGS}"
fi

# comma-separated list of tags to remove from the runner
if [[ -n "${ACTIONS_RUNNER_REMOVE_TAGS:-}" ]]; then
    # split the string into an array
    IFS=',' read -r -a remove_tags <<<"${ACTIONS_RUNNER_REMOVE_TAGS}"
fi

# add the build tags to the runner tags
runner_tags+=("${build_tags[@]}")
# add the extra tags to the runner tags
runner_tags+=("${extra_tags[@]}")
# remove the remove tags from the runner tags
runner_tags=("${runner_tags[@]/${remove_tags[@]}/}")

# Join the array elements with commas
runner_tags_str=$(printf "%s," "${runner_tags[@]}")
# Remove the trailing comma
runner_tags_str=${runner_tags_str%,}

# remove orgs/ and repos/ from the slug to get the registration URL
registration_slug=${ACTIONS_RUNNER_REGISTRATION_SLUG}
registration_slug="${registration_slug/orgs\//}"
registration_slug="${registration_slug/repos\//}"
registration_url="https://github.com/${registration_slug}"

ACTIONS_RUNNER_NAME=${ACTIONS_RUNNER_NAME:-$(uuidgen)}
ACTIONS_RUNNER_WORK_DIRECTORY=${ACTIONS_RUNNER_WORK_DIRECTORY:-"/home/runner/_work"}

# https://github.com/actions/runner/blob/main/src/Runner.Listener/Runner.cs
config_args=()
config_args+=("--disableupdate")
config_args+=("--unattended")
config_args+=("--name" "${ACTIONS_RUNNER_NAME}")
config_args+=("--url" "${registration_url}")
if [[ -n "${ACTIONS_RUNNER_GROUP:-}" ]]; then
    config_args+=("--runnergroup" "${ACTIONS_RUNNER_GROUP}")
fi
config_args+=("--work" "${ACTIONS_RUNNER_WORK_DIRECTORY}")
config_args+=("--labels" "\"${runner_tags_str}\"")

# shellcheck disable=SC2310
truthy "${ACTIONS_RUNNER_EPHEMERAL:-true}" && config_args+=("--ephemeral")
# shellcheck disable=SC2310
truthy "${ACTIONS_RUNNER_REPLACE:-}" && config_args+=("--replace")
# shellcheck disable=SC2310
truthy "${ACTIONS_RUNNER_NO_DEFAULT_LABELS:-}" && config_args+=("--no-default-labels")

# create and chown the work directory
mkdir -p "${ACTIONS_RUNNER_WORK_DIRECTORY}"
chown -R "runner:runner" "${ACTIONS_RUNNER_WORK_DIRECTORY}"

# chown the current directory since files will be written by the runner process
chown -R "runner:runner" /home/runner/

# disable tracing to avoid leaking the runner token
set +x

# configure as runner user
su - runner -c "/home/runner/config.sh --token $(</run/runner.token) ${config_args[*]}" 2>&1

rm -f /run/runner.token
