#!/usr/bin/env bash
# shellcheck disable=SC2312

# Exit if script is executed, not sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script must be sourced, not executed."
    exit 1
fi

curl_with_opts() {
    curl --fail --silent --retry 3 --connect-timeout 3 "$@"
}

truthy() {
    [[ ${1,,} =~ true|yes|on|1 ]]
}

log() {
    _level="$1"
    _message="$2"
    printf "[%s][%s] %s\n" "${0}" "${_level}" "${_message}" >&2
}

fail() {
    error "$1"
    sleep 10
    exit 1
}

error() {
    log "ERROR" "$1"
}

warn() {
    log "WARN" "$1"
}

info() {
    log "INFO" "$1"
}

get_geo() {
    # shellcheck disable=SC2310
    if curl_with_opts -I https://ipinfo.io >/dev/null 2>&1; then
        geoip_api_url=https://ipinfo.io
        if [[ -n ${GEOIP_API_TOKEN:-} ]]; then
            geoip_api_url="${geoip_api_url}?token=${GEOIP_API_TOKEN}"
        fi
        curl_with_opts "${geoip_api_url}"
    fi
}

round_up_to_power_of_two() {
    local _value=$1
    awk -v v="${_value}" 'BEGIN {
        p=int(log(v)/log(2));
        if (2^p < v) p++;
        print 2^p
    }'
}

get_rounded_mem_gib() {
    local _memgib
    _memgib="$(free -g | awk '/^Mem:/ {print $2}')"
    round_up_to_power_of_two "${_memgib}"
}

# Autmatically detect and add labels based on the environment
get_runtime_labels() {
    local _labels=()

    _labels+=("machine:$(uname -m)")
    _labels+=("arch:$(dpkg --print-architecture)")

    if command lsb_release; then
        _labels+=("family:$(lsb_release --id --short)")
        _labels+=("id:$(lsb_release --id --short)")
        _labels+=("distro:$(lsb_release --codename --short)")
        _labels+=("codename:$(lsb_release --codename --short)")
        _labels+=("release:$(lsb_release --release --short)")
    fi

    ipinfo="$(get_geo)"
    if [[ -n "${ipinfo}" ]]; then
        _labels+=("country:$(echo "${ipinfo}" | jq -r .country | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
        _labels+=("region:$(echo "${ipinfo}" | jq -r .region | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
        _labels+=("city:$(echo "${ipinfo}" | jq -r .city | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
    fi

    memgib="$(get_rounded_mem_gib)"
    if [[ -n "${memgib}" ]]; then
        _labels+=("${memgib}gib")
        _labels+=("mem:${memgib}Gi")
    fi

    numcpu="$(nproc)"
    if [[ -n "${numcpu}" ]]; then
        _labels+=("${numcpu}cpu")
        _labels+=("cpu:${numcpu}")
    fi

    if kvm-ok >/dev/null; then
        _labels+=("kvm")
    fi

    if [[ -f /sys/devices/virtual/dmi/id/board_name ]]; then
        _labels+=("board:$(</sys/devices/virtual/dmi/id/board_name)")
    fi

    if command -v lscpu >/dev/null; then
        _labels+=("cpu_model:$(lscpu | awk -F': *' '/Model name/ {print $2}')")
    fi

    # replace spaces with underscores
    _labels=("${_labels[@]// /_}")

    printf '%s ' "${_labels[@]}"
}

# Reset the container by copying the filesystem from the image to an empty volume
# and pivoting the root to the volume. The old root is read-only at this point.
# Requires privileged container.
reset_container() {
    local root_id
    local extra_mounts=()

    root_id="$(findmnt --noheadings --output ID --raw / | head -n 1)"
    echo "Root mount ID: ${root_id}"

    # Use process substitution instead of pipeline to avoid subshell
    while read -r target parent; do
        # Skip the root mount
        [[ "${target}" == "/" ]] && continue
        # Skip the rootfs mount
        [[ "${target}" == "/rootfs" ]] && continue
        # Skip submounts (where the parent is not the root)
        [[ "${parent}" != "${root_id}" ]] && continue
        extra_mounts+=("${target}")
    done < <(findmnt --types ext4,tmpfs,devtmpfs,proc,sysfs,shm --output TARGET,PARENT --noheadings)

    echo "Extra mounts: ${extra_mounts[*]}"

    # Clean existing rootfs
    rm -rf /rootfs/*

    # Rsync the container filesystem to the rootfs using single-device mode
    # to avoid corrupting the container filesystem.
    echo "Copying container filesystem to rootfs..."
    rsync --archive --one-file-system --xattrs --hard-links --acls / /rootfs

    echo "Pivoting rootfs..."
    mkdir -p /rootfs/oldroot
    pivot_root /rootfs /rootfs/oldroot

    echo "Repopulating extra mounts..."
    for mount in "${extra_mounts[@]}"; do
        mount -v --rbind "/oldroot${mount}" "${mount}"
    done

    umount -l /oldroot

    # Print the new mounts for debugging
    findmnt

    # Assert that these docker files are mounted as ext4 from the host
    findmnt | awk '/\/etc\/resolv.conf/ {if ($3 != "ext4") exit 1}'
    findmnt | awk '/\/etc\/hosts/ {if ($3 != "ext4") exit 1}'
    findmnt | awk '/\/etc\/hostname/ {if ($3 != "ext4") exit 1}'
}
