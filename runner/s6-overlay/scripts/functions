#!/usr/bin/env bash
# shellcheck disable=SC2312

# Exit if script is executed, not sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script must be sourced, not executed."
    exit 1
fi

curl_with_opts() {
    curl --fail --silent --retry 3 --connect-timeout 3 "$@"
}

truthy() {
    [[ ${1,,} =~ true|yes|on|1 ]]
}

get_geo() {
    # shellcheck disable=SC2310
    if curl_with_opts -I https://ipinfo.io >/dev/null 2>&1; then
        geoip_api_url=https://ipinfo.io
        if [[ -n ${GEOIP_API_TOKEN:-} ]]; then
            geoip_api_url="${geoip_api_url}?token=${GEOIP_API_TOKEN}"
        fi
        curl_with_opts "${geoip_api_url}"
    fi
}

round_up_to_power_of_two() {
    local _value=$1
    awk -v v="${_value}" 'BEGIN {
        p=int(log(v)/log(2));
        if (2^p < v) p++;
        print 2^p
    }'
}

get_rounded_mem_gib() {
    local _memgib
    _memgib="$(free -g | awk '/^Mem:/ {print $2}')"
    round_up_to_power_of_two "${_memgib}"
}

# Autmatically detect and add labels based on the environment
get_runtime_labels() {
    local _labels=()

    _labels+=("machine:$(uname -m)")
    _labels+=("arch:$(dpkg --print-architecture)")

    if command lsb_release; then
        _labels+=("family:$(lsb_release --id --short)")
        _labels+=("id:$(lsb_release --id --short)")
        _labels+=("distro:$(lsb_release --codename --short)")
        _labels+=("codename:$(lsb_release --codename --short)")
        _labels+=("release:$(lsb_release --release --short)")
    fi

    ipinfo="$(get_geo)"
    if [[ -n "${ipinfo}" ]]; then
        _labels+=("country:$(echo "${ipinfo}" | jq -r .country | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
        _labels+=("region:$(echo "${ipinfo}" | jq -r .region | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
        _labels+=("city:$(echo "${ipinfo}" | jq -r .city | tr ' ' '_' | tr '[:upper:]' '[:lower:]')")
    fi

    memgib="$(get_rounded_mem_gib)"
    if [[ -n "${memgib}" ]]; then
        _labels+=("${memgib}gib")
        _labels+=("mem:${memgib}Gi")
    fi

    numcpu="$(nproc)"
    if [[ -n "${numcpu}" ]]; then
        _labels+=("${numcpu}cpu")
        _labels+=("cpu:${numcpu}")
    fi

    if kvm-ok >/dev/null; then
        _labels+=("kvm")
    fi

    if [[ -f /sys/devices/virtual/dmi/id/board_name ]]; then
        _labels+=("board:$(</sys/devices/virtual/dmi/id/board_name)")
    fi

    if command -v lscpu >/dev/null; then
        _labels+=("cpu_model:$(lscpu | awk -F': *' '/Model name/ {print $2}')")
    fi

    # replace spaces with underscores
    _labels=("${_labels[@]// /_}")

    printf '%s ' "${_labels[@]}"
}

# Reset the container filesystem to the initial state by deleting the upper layer.
# Requires privileged container.
reset_container() {
    # Get the device containing the docker data directory based on the /etc/hosts file mount.
    # This is an automatic ext4 file mounted by docker on the host.
    docker_data_dev="$(df --output=source /etc/hosts | tail -n 1)"

    # Mount the host device containing the docker data directory.
    mount_dir="$(mktemp -d)"
    mount -v "${docker_data_dev}" "${mount_dir}"

    # Extract the overlay ID from the root mount options.
    overlay_id=$(findmnt -t overlay -no OPTIONS / | grep -o 'upperdir=[^,]*' | cut -d= -f2 | awk -F/ '{print $(NF-1)}')
    echo "Overlay ID: ${overlay_id}"

    # Find first matching overlay directory.
    upper_dir="$(find "${mount_dir}" -path "**/overlay2/${overlay_id}/diff" -print -quit)"
    echo "Upper dir: ${upper_dir}"

    # Preserve directory structure but delete contents.
    # This effectively "deletes" the upper layer and resets the container to the initial state.
    echo "Deleting contents of upper layer..."
    find "${upper_dir:?}" -mindepth 1 -print
    find "${upper_dir:?}" -mindepth 1 -delete

    # Unmount the host device containing the docker data directory.
    umount -v "${mount_dir}"

    # Remove the temporary mount directory.
    rm -rf "${mount_dir}"
}
