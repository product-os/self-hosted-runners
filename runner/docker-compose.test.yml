---
version: "2.4"

services:
  sut:
    image: sut
    build:
      context: .
    privileged: true
    userns_mode: host
    cap_add:
      - ALL
    # https://github.com/product-os/self-hosted-runners/settings/secrets/actions/COMPOSE_VARS
    # COMPOSE_VARS=$(cat .env | openssl base64 -A)
    env_file:
      # (required) GH_TOKEN with appropriate scope(s)
      # (optional) GEOIP_API_TOKEN (https://ipinfo.io/login)
      - .env
    environment:
      # test at the org. level
      GITHUB_ORG: product-os
      ACTIONS_RUNNER_GROUP: Default
    tmpfs:
      - /tmp
      - /var/run
      - /home/github/_work
      - /var/lib/docker
      - /scratch
      - /balena
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
    entrypoint:
      - /bin/bash
      - "-c"
    command:
      - |
        set -axe

        # GITHUB_TOKEN injected by Flowzone
        GH_TOKEN=${GH_TOKEN:-${GITHUB_TOKEN}}

        # background entrypoint
        ./balena.sh &

        # wait for DinD
        while ! docker ps; do
            sleep "$$(( ( RANDOM % 3 ) + 3 ))s"
        done

        # check if we are virtualized
        cont_arch="$$(docker info | grep Architecture:)"
        host_arch="$$(sudo DOCKER_HOST=unix:///host/var/run/docker.sock docker info | grep Architecture:)"
        if [ "$${cont_arch}" != "$${host_arch}" ]
        then
            echo "Container architecture ($${cont_arch}) does not match host architecture ($${host_arch})"
            echo "Skipping runner tests for emulated environments..."
            exit 0
        fi

        # wait for runner
        while ! pgrep Runner.Listener; do
            sleep "$$(( ( RANDOM % 3 ) + 3 ))s"
        done

        # check runner registration
        while ! test -f .runner; do
            sleep "$$(( ( RANDOM % 3 ) + 3 ))s"
        done

        # TBC: is this enough?
        cat .runner | jq -r
