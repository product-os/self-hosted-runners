name: Tests

"on":
  pull_request:
    branches:
      - main
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # This job depends on all runner checks passing
  # so we can mark it as a required status check.
  all_tests:
    name: All tests
    needs: runs_on
    runs-on: ubuntu-latest
    steps:
      - name: Log GitHub context
        env:
          CONTEXT: ${{ toJSON(github) }}
        run: echo "${CONTEXT}" || true

  # Run tests directly on the runners that are spun up
  # by the docker compose tests in Flowzone.
  runs_on:
    name: Runs on
    # Set a reasonable timeout because if the e2e workflow jobs fail
    # to pick up the self-hosted runners from the docker compose tests,
    # they will idle until timeout.
    timeout-minutes: 60
    # These tags MUST match the draft runners being tested by the Flowzone workflow.
    runs-on:
      - ${{ matrix.tag1 }}
      - ${{ matrix.tag2 }}
      - ${{ matrix.tag3 }}
      - ${{ matrix.tag4 }}

    strategy:
      fail-fast: false
      matrix:
        tag1:
          - "distro:jammy"
          - "distro:focal"
        tag2:
          - "platform:linux/amd64"
          - "platform:linux/arm64"
        tag3:
          - "runtime:container"
          - "runtime:vm"
        tag4:
          - "commit:${{ github.sha }}"

    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}

    # Add as many tests as we think necessary to establish
    # whether the runner image is ready for production CI runs.
    steps:
      - name: Check environment
        run: |
          date
          id
          printenv

      - name: Check secrets
        run : |
          ! printenv | grep -q ACTIONS_RUNNER_AUTH_TOKEN=
          ! printenv | grep -q ACTIONS_RUNNER_APP_KEY_B64=
          ! printenv | grep -q GH_TOKEN=
          ! printenv | grep -q GITHUB_TOKEN=

      - name: Check system
        run: |
          cat /etc/os-release
          uname -a
          free -h
          df -h
          lsblk

      - name: Check devices
        run: |
          ls -al /dev/

          echo "Hello, World!" >/dev/stdout
          echo "Hello, World!" >/dev/stderr

      - name: Check networking
        run: |
          hostname

          ip addr
          ip link list
          ip route
          
          npm ping

          curl -fsSL https://raw.githubusercontent.com/dylanaraps/neofetch/7.1.0/neofetch | bash

      - name: Check docker
        run: |
          docker info
          docker run hello-world

      - name: Check packages
        run: |
          # 'pwsh -Version' fails with:
          # GC heap initialization failed with error 0x8007000E
          # Failed to create CoreCLR, HRESULT: 0x8007000E
          # only on arm64 Vm runners
          pwsh -Version || true
          containerd --version
          dockerd --version
          aws --version
          buildah --version
          ctr --version
          docker buildx version
          docker compose version
          gh version
          node --version
          npm --version
          podman --version
          runc --version
          skopeo --version
          socat -V
          yq --version
          zstd --version
